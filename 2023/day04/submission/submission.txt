Day4 of #90DaysOofDevOps

1. Explain in your own words and examples, what is Shell Scripting for DevOps.
Shell scripting is a powerful tool used in DevOps to automate various processes and tasks related to the management and deployment of software applications. It involves writing scripts using a shell language, such as Bash, to automate tasks.

With shell scripting, DevOps engineers can automate tasks such as configuring servers, deploying applications, and monitoring system performance.

For example, a DevOps engineer might write a shell script to automate the process of deploying a new version of a software application. The script could handle tasks such as stopping the existing application, backing up the database, copying over the new files, and starting the new version of the application.

2. What is `#!/bin/bash?` can we write `#!/bin/sh` as well?
The #!/bin/bash is called a shebang or hashbang. It is a special comment that indicates the interpreter to be used to run the script. In this case, it specifies that the Bash shell should be used to interpret the commands in the script.

Yes, it's also possible to write #!/bin/sh to specify the Portable Operating System Interface for UNIX (POSIX) shell as the interpreter, which is a more basic shell that has fewer features than Bash. However, Bash is more widely used and has more advanced features, so it's often the preferred choice for shell scripting in DevOps.

3. Write a Shell Script which prints `I will complete #90DaysOofDevOps challenge`
#!/bin/bash

echo "I will complete #90DaysofDevOps Challenge"

4. Write a Shell Script to take user input, input from arguments and print the variables.
#!/bin/bash

# Taking user input
echo "Enter your name"
read name

# Input from arguments
echo "Enter your age"
read age

# Printing variables
echo "Your name is : $name"
echo "Your age is : $age"

 6 .Write an Example of If else in Shell Scripting by comparing 2 numbers
 #!/bin/bash

#Taking user input
echo "Enter the first number"
read Num1

echo "Enter the second number"
read Num2

#Comparing the numbers

if [ "$Num1" -gt "$Num2" ];
then
echo "Num1 is greater than Num2"

elif ["$Num1" -lt "$Num2"];
then
echo "Num1 is less than Num2"

else
echo "Num1 is equal to Num2"
fi